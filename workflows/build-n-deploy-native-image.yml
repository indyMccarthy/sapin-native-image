name: Sapin - Build native image & Deploy on Cloud Run

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build-native-image:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2

        # setup Docker build action
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        # login to GCR
        - name: Login to GCR
          uses: docker/login-action@v2
          with:
            registry: gcr.io
            username: _json_key
            password: ${{ secrets.GCR_JSON_KEY }}

        - name: Login to Github Packages
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GHCR_TOKEN }}

        - name: Get tag
          run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
        - name: Build image and push to GitHub Container Registry
          id: docker_build
          uses: docker/build-push-action@v3
          with:
            # relative path to the place where source code with Dockerfile is located
            context: .
            file: ./Dockerfile
            # Note: tags has to be all lower-case
            tags: |
              ghcr.io/indymccarthy/sapin:latest
              ghcr.io/indymccarthy/sapin:${{ env.RELEASE_VERSION }}
              ghcr.io/indymccarthy/sapin:${{ github.sha }}
              gcr.io/sapin-356719/sapin-native-image:latest
              gcr.io/sapin-356719/sapin-native-image:${{ env.RELEASE_VERSION }}
              gcr.io/sapin-356719/sapin-native-image:${{ github.sha }}
            push: true

        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-native-image-on-cloudrun:
    runs-on: ubuntu-latest
    needs: build-native-image
    steps:
        - uses: actions/checkout@v2
        - uses: hashicorp/setup-terraform@v2

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          working-directory: ./terraform
          run: terraform init
          env:
            GOOGLE_CREDENTIALS: ${{ secrets.GCR_JSON_KEY }}
            TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
            TF_VAR_service_account: ${{ secrets.GCP_SVC_ACCNT }}

        # Checks that all Terraform configuration files adhere to a canonical format
        - name: Terraform Format
          working-directory: ./terraform
          run: terraform fmt -check

        # Generates an execution plan for Terraform
        - name: Terraform Plan
          working-directory: ./terraform
          run: terraform plan
          env:
            GOOGLE_CREDENTIALS: ${{ secrets.GCR_JSON_KEY }}
            TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
            TF_VAR_service_account: ${{ secrets.GCP_SVC_ACCNT }}

          # On push to main, build or change infrastructure according to Terraform configuration files
          # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        - name: Terraform Apply
          working-directory: ./terraform
          if: endsWith(github.ref, 'RELEASE') == true
          run: terraform apply -auto-approve
          env:
            GOOGLE_CREDENTIALS: ${{ secrets.GCR_JSON_KEY }}
            TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
            TF_VAR_service_account: ${{ secrets.GCP_SVC_ACCNT }}
